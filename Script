pcall(function()
    local StarterGui = game:GetService("StarterGui")
    StarterGui:SetCore("SendNotification", {
            Title = "NOVA HUB Reanimataion";
            Text = "Loaded FE Dog";
            
        })
end)

local events = game:GetService("ReplicatedStorage").Communication.Events
local functions = game:GetService("ReplicatedStorage").Communication.Functions
for i,v in pairs(getgc(true)) do
    if typeof(v) == 'table' and rawget(v, 'getIsBodyMoverCreatedByGame') then
         v.getIsBodyMoverCreatedByGame = function(gg)
             return true
         end
    end
    if typeof(v) == 'table' and rawget(v, 'kick') then
         v.kick = function() return wait(9e9) end
    end
    if typeof(v) == 'table' and rawget(v, 'randomDelayKick') then
         v.randomDelayKick = function() return wait(9e9) end
    end
    if typeof(v) == 'table' and rawget(v, 'connectCharacter') then
         v.connectCharacter = function(gg) return wait(9e9) end
    end
    if typeof(v) == "table" and rawget(v,"Remote") then
        v.Remote.Name = v.Name
    end
end
local oldnamecall; oldnamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local args = {...}
    local method = getnamecallmethod();
  
    if (method == "Kick" or method == "kick") and self == game.Players.LocalPlayer then
        return;
    end
  
    return oldnamecall(self, unpack(args))
end)
local newindex
newindex = hookmetamethod(game, "__namecall", function(self, ...)
    local howcalledomg = getnamecallmethod()
    local whataretheargs = {...}
    if not checkcaller() and self.Name == "StartFallDamage" or self.Name == "TakeFallDamage"  and howcalledomg == "FireServer" then
        return wait(9e9)
    end
    return newindex(self, ...)
end)
for i = 1, 25 do -- inf jump bypass
    events.StartFastRespawn:FireServer()
    functions.CompleteFastRespawn:FireServer()
    wait()
end
functions.SpawnCharacter:FireServer()

wait(1)

local attach = {}
local motor = {}
local Players = game:service'Players'
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character
local RunService = game:service'RunService'
local UIS = game:service'UserInputService'
-- !! REANIMATION !!
local Animate = Character.Animate
Animate.Disabled = true
Animate:Destroy()
for i,BSC in pairs(Character.Torso:GetChildren()) do
    if BSC:IsA("Motor6D") then
        --if BSC.Name ~= 'Neck' then
        BSC:Destroy()
        --end
    end
end
for i,BSC in pairs(Character:GetDescendants()) do
    if BSC:IsA("BallSocketConstraint") then
        BSC.Enabled = true
        BSC.Visible = true
        BSC.TwistLimitsEnabled = true
        BSC.LimitsEnabled = true
        BSC.TwistUpperAngle = 0
        BSC.TwistLowerAngle = 0
        BSC.UpperAngle = 0
        BSC.Radius = 0
        BSC.MaxFrictionTorque = math.huge * 9e9
        BSC.Restitution = 0
        local name = BSC.Parent.Name:lower()
        if name ~= "neck" then
            name = string.gsub(name," ","")
            attach[name] = BSC.Attachment0
        end
    end
end
-- main script
local function GetClosest(dist)
    local Character = LocalPlayer.Character
    local HumanoidRootPart = Character and Character:FindFirstChild("HumanoidRootPart")
    if not (Character or HumanoidRootPart) then return end

    local TargetDistance = dist
    local Target

    for i,v in ipairs(Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            local TargetHRP = v.Character.HumanoidRootPart
            local mag = (HumanoidRootPart.Position - TargetHRP.Position).magnitude
            if mag < TargetDistance then
                TargetDistance = mag
                Target = v
            end
        end
    end

    return Target
end
attach["neck"] = Character.Torso.NeckAttachment
local SprintSpeed = 35
local Humanoid = Character.Humanoid
local neck = attach["neck"].CFrame
local rightarm = attach["rightarm"].CFrame
local leftarm = attach["leftarm"].CFrame
local rightleg = attach["rightleg"].CFrame
local leftleg = attach["leftleg"].CFrame
local root = Character["HumanoidRootPart"].RootJoint.C1
local Animation = Instance.new('Animation')
Animation.AnimationId = "rbxassetid://282574440"
Animation.Parent = Humanoid
local Animation2 = Instance.new('Animation')
Animation2.AnimationId = "rbxassetid://4611813691"
Animation2.Parent = Humanoid
local Flailing = Humanoid:LoadAnimation(Animation)
local StandUp = Humanoid:LoadAnimation(Animation2)
local State = "Idle"
local hand = false
local succ = false
Character.Head.CanCollide = false
Character.Torso.CanCollide = false
sine = 0

local dis = UIS.InputBegan:Connect(function(K,C)
    if C then return end
    
    if (K.KeyCode == Enum.KeyCode.R and State == "Idle" and hand == false and succ == false) then
        task.spawn(function()
            hand = true
            Humanoid.WalkSpeed = 0
            for i = 1,180 do 
                attach["rightarm"].CFrame = rightarm * CFrame.Angles(math.sin(-35 * sine),math.rad(90),0)
                game.RunService.Heartbeat:Wait()
            end
            hand = false
            Humanoid.WalkSpeed = 16
        end)
    end
    
    if (K.KeyCode == Enum.KeyCode.T and State == "Idle" and succ == false and hand ==  false) then
        task.spawn(function()
            succ = true
            Humanoid.WalkSpeed = 0
            for i = 1,360 do 
                attach["rightarm"].CFrame = rightarm * CFrame.new(0,0,-1.5 + math.sin(25 * sine)) * CFrame.Angles(0,math.rad(-180),0)
                game.RunService.Heartbeat:Wait()
            end
            succ = false
            Humanoid.WalkSpeed = 16
        end)
    end
    
    if (K.KeyCode == Enum.KeyCode.G) then
        local Weapon
        for i, v in pairs(LocalPlayer.Backpack:GetChildren()) do
            if v:IsA("Tool") then
                if v:FindFirstChild("Hitboxes") ~= nil then
                    Weapon = v
                end
            end
        end
        StandUp:Play()
        StandUp.TimePosition = 0.3
        if Weapon then
            Humanoid:EquipTool(Weapon)
            local Closest = GetClosest(12)
            if Closest then
                pcall(function()
                    local args1 = {
                        [1] = Weapon,
                        [2] = 1
                    }

                    game:GetService("ReplicatedStorage").Communication.Events.MeleeSwing:FireServer(unpack(args1))
                    wait(.2)

                    local args = {
                        [1] = Weapon,
                        [2] = Closest.Character.HumanoidRootPart,
                        [3] = Weapon.Hitboxes.Hitbox,
                        [4] = Closest.Character.HumanoidRootPart.Position,
                    }

                    game:GetService("ReplicatedStorage").Communication.Events.MeleeDamage:FireServer(unpack(args))

                    game:GetService("ReplicatedStorage").Communication.Events.MeleeDamage:FireServer(unpack(args))
                    Weapon.Parent = LocalPlayer.Backpack
                end)
            end
            wait(.2)
            Weapon.Parent = LocalPlayer.Backpack
        end
    end
end)
task.spawn(function()
    while wait(3) do
        for i,BSC in pairs(Character:GetDescendants()) do
            if BSC:IsA("BallSocketConstraint") then
                BSC.Enabled = true
                BSC.Visible = true
                BSC.TwistLimitsEnabled = true
                BSC.LimitsEnabled = true
                BSC.TwistUpperAngle = 0
                BSC.TwistLowerAngle = 0
                BSC.UpperAngle = 0
                BSC.Radius = 0
                BSC.MaxFrictionTorque = math.huge * 9e9
                BSC.Restitution = 0
            end
        end
    end
end)
while true do
    sine = sine + 1
    State = (Humanoid.MoveDirection == Vector3.new(0,0,0) and not Humanoid.Jump) and "Idle" or (Humanoid:GetState() == Enum.HumanoidStateType.Running and not Humanoid.Jump) and "Walk" or (Humanoid.Jump == true) and "Jumping" or (Humanoid:GetState() == Enum.HumanoidStateType.FallingDown) and "Falling"
    if hand then game.RunService.Heartbeat:Wait() continue end
    if succ then game.RunService.Heartbeat:Wait() continue end
    if State == "Idle" then
        Humanoid.HipHeight = -1.3
        Flailing:Stop()
        attach["neck"].CFrame = neck * CFrame.Angles(0,0,0)
        attach["rightarm"].CFrame = rightarm * CFrame.new(-.5,-.5,-.5) * CFrame.Angles(math.rad(-75),math.rad(90),-0)
        attach["leftarm"].CFrame = leftarm * CFrame.new(-.5,-.5,.5) * CFrame.Angles(math.rad(75),math.rad(-90),-0)
        attach["rightleg"].CFrame = rightleg * CFrame.Angles(math.rad(90),0,math.rad(35))
        attach["leftleg"].CFrame = leftleg * CFrame.Angles(math.rad(90),0,math.rad(-35))
    elseif State == "Walk" then
        Humanoid.HipHeight = 1
        Flailing:Play()
        if sinemode then
            game.ReplicatedStorage.Communication.Events.UpdateIsParkouring:FireServer(true)
            attach["neck"].CFrame = neck * CFrame.new(0,1,0) * CFrame.Angles(math.rad(90),0,0)
            attach["rightarm"].CFrame = rightarm * CFrame.new(-1,1,0) * CFrame.Angles(45 + math.sin(25 * sine),0,math.rad(-90))
            attach["leftarm"].CFrame = leftarm * CFrame.new(-1,1,0) * CFrame.Angles(-45 - math.sin(-25 * sine),0,math.rad(-90))
            attach["rightleg"].CFrame = rightleg * CFrame.Angles(45 + math.sin(25 * sine),0,0)
            attach["leftleg"].CFrame = leftleg * CFrame.Angles(45 + math.sin(-25 * sine),0,0)
        else
            game.ReplicatedStorage.Communication.Events.UpdateIsParkouring:FireServer(false)
            attach["neck"].CFrame = neck * CFrame.new(0,1,0) * CFrame.Angles(math.rad(90),0,0)
            attach["rightarm"].CFrame = rightarm * CFrame.new(-1,1,0) * CFrame.Angles(45 + math.sin(25 * tick()),0,math.rad(-90))
            attach["leftarm"].CFrame = leftarm * CFrame.new(-1,1,0) * CFrame.Angles(-45 - math.sin(-25 * tick()),0,math.rad(-90))
            attach["rightleg"].CFrame = rightleg * CFrame.Angles(45 + math.sin(25 * tick()),0,0)
            attach["leftleg"].CFrame = leftleg * CFrame.Angles(45 + math.sin(-25 * tick()),0,0)
        end
    elseif State == false then
        game.ReplicatedStorage.Communication.Events.UpdateIsParkouring:FireServer(false)
        Flailing:Play()
        attach["neck"].CFrame = neck * CFrame.new(0,1,0) * CFrame.Angles(math.rad(90),0,0)
        attach["rightarm"].CFrame = rightarm * CFrame.new(-1,1,0) * CFrame.Angles(45 + math.sin(-25 * sine),math.rad(-15),math.rad(-90))
        attach["leftarm"].CFrame = leftarm * CFrame.new(-1,1,0) * CFrame.Angles(-45 + math.sin(25 * sine),math.rad(15),math.rad(-90))
        attach["rightleg"].CFrame = rightleg * CFrame.Angles(45 + math.sin(25 * sine),math.rad(-15),math.rad(5))
        attach["leftleg"].CFrame = leftleg * CFrame.Angles(45 + math.sin(25 * sine),math.rad(15),math.rad(-5))
    end
    if UIS:IsKeyDown(Enum.KeyCode.LeftShift) then
        Humanoid.WalkSpeed = SprintSpeed
        sinemode = false
    else
        Humanoid.WalkSpeed = 16
        sinemode = true
    end
    game.RunService.Heartbeat:Wait()
end
end)
